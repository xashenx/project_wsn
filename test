#!/bin/bash    
# @author Fabrizio Zeni

# $1: mode of the test (e.g. Normal, Best Effort, ..)
# $2: number of sequential tests
# $3: number of nodes
# $4: name of the test
# $5: python script to run the test
# $6: compile request
args="$@"

# checks the parameter for the compilation
clear

if [[ $# = 1 && $1 = "help" ]] ; then
	echo -e "\nSCRIPT CALL FORMAT: ./test test_mode number_of_tests number_of_nodes name_of_test python_script_name [compile]"
	echo -e "\nPARAMETERS INFORMATION\n"
	echo -e "test_mode:"
	echo -e "\tnormal:\t\tthe script will execute the simulations with the normal version"
	echo -e "\tbest:\t\tthe script will execute the simulations with the best-effort version"
	echo -e "\tremove:\t\tthe script will execute the simulations with the remove-parent version"
	echo -e "\ttree:\t\tthe script will execute the simulations with the tree-single-parent version"
	echo -e "\nname_of_test:\t\tthis will be used as label into the results files"
	echo -e "\npython_script_name:\tthe name of the script to use, without extension\n"
	exit 0
elif [[ $# = 1 && $1 = "clean" ]]; then
	cd Graph
	make clean
	cd ../Tree
	make clean
	exit 0
fi


if [[ $# != 6 && $# != 5 ]]; then
	echo ERROR! Some arguments are missing! $#
	echo USAGE: ./test test_mode number_of_tests number_of_nodes name_of_test python_script_name [compile]
	echo TIP: for more details type './test help'
	exit 0
elif [[ $1 = "normal" || $1 = "best" || $1 = "remove" ]]; then
	cd Graph
#elif [[ $1 = "normal" && $6 = "compile" ]]; then
	if [[ $1 = "normal" && $6 = "compile" ]]; then
		echo COMPILING WITH NORMAL PARAMETERS
		make micaz sim
	elif [[ $1 = "best" && $6 = "compile" ]]; then
		echo COMPILING WITH BEST EFFORT PARAMETERS
		make micaz sim -f Best
	elif [[ $1 = "remove" && $6 = "compile" ]]; then
		echo COMPILING WITH REMOVE PARAMETERS
		make micaz sim -f Remove
	fi
elif [ $1 = "tree" ]; then
	cd Tree
	if [[ $1 = "tree" && $6 = "compile" ]]; then
		echo COMPILING TREE VERSION
		make micaz sim
	fi
fi

######### CHECKS ON THE DIRECTORY STRUCTURE

## IF THE DIRECTORY FOR THE TEST SCRIPT IS EXISTENT, CREATE IT

if [ ! -d "../results/$5" ]; then
	mkdir -p ../results/$5
fi

## IF THE SUMMARY OF THE TEST DOES NOT EXISTS, CREATE IT

if [ ! -e "../results/summary.csv" ]; then
	echo -e "NAME\tMODE\tSCRIPT\tSIMULATIONS\tDATE" >> ../results/summary.csv
fi
## PUT THE DETAILS OF THE CURRENT TEST IN THE SUMMARY
echo -e "$4\t$1\t$5.py\t$2\t$(date +"%m-%d-%Y  %T")" >> ../results/summary.csv

labels=""
for ((i=0;i<$3;i++)); do
	if [ $i = 0 ]; then
		labels=NAME\\t0\\t1
	else
		labels=$labels\\t$((i+1))
	fi
done
labels=$labels\\tTOT

### START OF THE TESTS

for ((i=0;i<$2;i++)); do
	echo RUNNING SIMULATION \#$((i+1))
	## STORE THE OUTPUT OF THE SIMULATION IN A TEMP FILE
	python $5.py > ../executionOutput
	for ((j=0;j<$3;j++)); do
		## PUT THE # OF MESSAGES WHICH REACHED THE SINK DIVIDED BY NODE
		cat ../executionOutput | grep -i "0)" | grep -cP "RECEIVED\t$((j+1))" >> ../results/$((j+1)).out
		for ((k=0;k<$(($3+1));k++)); do
			## SAVES THE MESSAGES FORWARDED FROM EACH NODE DIVIDED BY PARENT
			if [ $k = 0 ]; then
				tot=$(cat ../executionOutput | grep -i "$((j+1)))" | grep -c "$k:")
				tmp=$(cat ../executionOutput | grep -i "$((j+1)))" | grep -c "$k:")
			else
				current=$(cat ../executionOutput | grep -i "$((j+1)))" | grep -c "$k:")
				tot=$(( tot + current))
				tmp=$tmp\\t$current
			fi
			cat ../executionOutput | grep -i "$((j+1)))" | grep -c "$k:" >> ../results/$((j+1))_$k.out
		done
		echo -e "$tmp\\t$tot" >> ../results/forw_$((j+1)).out
	done
	#if [ ! -e "../results/$5/forward_$((j+1)).csv" ]; then
	#	echo -e $labels >> ../results/$5/forward_$((j+1)).csv
	#fi
	#echo -e $prova >> ../results/$5/forward_$((j+1)).csv
	#echo ${forwarded[1]}
	rm ../executionOutput
done

cd ..

for ((i=0;i<$3;i++)); do
	## MAKES STATISTICAL ANALYSIS OVER THE DATA GATHERED DURING THE SIMULATIONS
	if [ ! -e "results/$5/arrived_$((i+1)).csv" ]; then
		awk -v name=$4 -v top=yes -f statistics.awk results/$((i+1)).out >> results/$5/arrived_$((i+1)).csv
	else
		awk -v name=$4 -f statistics.awk results/$((i+1)).out >> results/$5/arrived_$((i+1)).csv
	fi
	if [ ! -e "results/$5/forwarded_$((i+1)).csv" ]; then
		echo -e $labels >> results/$5/forwarded_$((i+1)).csv
	fi
	for ((j=0;j<$3+1;j++)); do
		if [ $j = 0 ]; then
			forw[$((i+1))]=$4\\t$(awk -v COL=1 -f mean.awk results/forw_$((i+1)).out)
			forw[$((i+1))]=${forw[$((i+1))]}\\t$(awk -v COL=2 -f mean.awk results/forw_$((i+1)).out)
		else
			forw[$((i+1))]=${forw[$((i+1))]}\\t$(awk -v COL=$((j+2)) -f mean.awk results/forw_$((i+1)).out)
		fi
	done
	echo -e ${forw[$((i+1))]} >> results/$5/forwarded_$((i+1)).csv
done
rm results/*.out
exit 0
